#define SUCCESSFUL 0
#define ERROR -1

#define TRUE 1
#define FALSE 0

#define DEBUG 0

typedef struct {

    char* path;	        // fully qualified path to the executable or built-in cmd (must malloc)
    int argc;	        // total number of arguments (0 if no command provided see Example 3, -1 if command not found see Example 4)
    char** argv;	// argument values (must malloc)

} command_t;

/* ------------------------------------------------------------------------------

This function will parse the command (cmd for short) and its arguments specified 
by the user.  
 
 function:
	- parameter(s): char* pointer that contains the cmd and its arguments, 
					and a pointer to an existing command_t structure
	- return: N/A

*/
void parse( char* line, command_t* p_cmd );

/* ------------------------------------------------------------------------------

This function will only execute external commands (cmd for short), such as ls 
or cp, using the execv system function.
 
 function:
	- parameter(s): pointer to a command_t structure
    - return: status code from wait function.

*/
int execute( command_t* p_cmd );

/* ------------------------------------------------------------------------------

This function is used to determine if the named command (cmd for short) entered by 
the user in the shell can be found in one of the folders defined in the PATH 
environment (env for short) variable.

 function:
	- parameter(s): char* pointer that has named command (e.g. ls), and a pointer 
	  to an existing command_t structure. If found in path, it sets the cmd 
	  struct path field to the fully qualified path of the named command (e.g. 
	  p_cmd->path = "/bin/ls"), else it simply puts sets the path field to the named 
	  command (e.g. p_cmd->path="ls").
	- return: TRUE if named command is in the PATH, or FALSE if not in the PATH. 

*/
int find_fullpath( char* command_name, command_t* p_cmd );

/* ------------------------------------------------------------------------------

This function will determine if the command (cmd for short) entered in the shell by 
the user is a valid builtin command.

function:
	- parameter(s): pointer to a command_t structure
	- return: TRUE if the cmd is in array, else FALSE if not in array. 

*/
int is_builtin( command_t* p_cmd );

/* ------------------------------------------------------------------------------

This function is used execute built-in commands such as change directory (cd)

function:
	- parameter(s): pointer to a command_t structure
	- return: SUCCESSFUL if no error occurred during chdir operation, or ERROR 
			if an error condition was generated by chdir operation.

*/
int do_builtin( command_t* p_cmd );

/* ------------------------------------------------------------------------------

This function is used to free memory that may be malloc'd for the name and argv 
fields in the command_t structure.
function:
	- parameter(s): pointer to a command_t structure
	- return: N/A

*/
void cleanup( command_t* p_cmd );


/* ------------------------------------------------------------------------------

This function is very similar to the strcmp function already provided by std.h,
so using it is optional.

*/
int equals( char* str1, const char* str2 );
